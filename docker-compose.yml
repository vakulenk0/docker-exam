
services:
  app:
    build: . # Указываем путь на dockerfile
    container_name: my-app
    ports: # Пробрасываем порты (Это означает, что порт 3000 внутри контейнера будет связан с портом 3000 на хостовой машине.)
           # Если, к примеру, запись такая: 3000:3000; Слева - port хоста, справа - port контейнера. Когда кто-то обращается к порту 3000 на хостовой машине (например, через http://localhost:3000), 
           # этот запрос будет перенаправлен внутрь контейнера на порт 3000.
      - "3000:3000"
    # environment:
    #   - DATABASE_URL=postgresql://postgres:admin@db:5432/whiteboard
    #   - JWT_SECRET=9cd1ace00b9d727501351c115617ddabc7198defa2fb94804f72c11006199986
    #   - REFRESH_SECRET=b94e9426dd1e5ae18dd90370a79a23ba45aac4270ce4704a3a6e57dc3715e3be
    env_file:
      - .env
    depends_on: # Говорит о том, что этот контейнер запустится только после создания "db" контейнера
      - db
    command: ["sh", "-c", "npx prisma migrate dev --name init && npm run dev"]
    networks: # Благодаря этому полю, мы указали, что app и db находятся в одной сети и могут взимодействовать друг с другом
      - mynetwork

  db:
    image: postgres:16
    container_name: postgres-db
    env_file:
      - .env
    # environment:
    #   - POSTGRES_USER=postgres
    #   - POSTGRES_PASSWORD=admin
    #   - POSTGRES_DB=whiteboard
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - mynetwork

networks: # Здесь мы указали как именно контейнеры взаимодействуют 
  mynetwork:
    driver: bridge # bridge — это тип сети по умолчанию в Docker. Контейнеры в сети bridge могут взаимодействовать друг с другом, но изолированы от других сетей.

volumes: # Здесь мы указываем, чтобы данные в базе сохранялись при отключении контейнера
  postgres-data:
